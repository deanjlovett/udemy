//--Summary:
//  Create a program that utilizes goroutines to run the provided calculation
//  function on a number of jobs. The results from the goroutines must be
//  communicated back to the main thread using a channel, and then added
//  together.
//
//--Requirements:
//* Run `longCalculation` for each job generated by the `makeJobs` function
//* Each job must be run in a separate goroutine
//* The result from `longCalculation` must be provided to the main function
//  using a channel
//* Sum the results from each job to generate a final result, and print it
//  to the terminal

package main

import "fmt"
import "time"
import "math/rand"
import "sync"

type Job int

func longCalculation(i Job) int {
	duration := time.Duration(rand.Intn(1000)) * time.Millisecond
	time.Sleep(duration)
	fmt.Printf("Job %d complete in %v\n", i, duration)
	return int(i) * 30
}

func makeJobs() []Job {
	jobs := make([]Job, 0, 100)
	for i := 0; i < 100; i++ {
		jobs = append(jobs, Job(rand.Intn(10000)))
	}
	return jobs
}
// type ControlMsg int
// const (
// 	DoExit = iota
// 	ExitOk
// )
type Result struct {
	result int
	job Job
}

func runJob(
	job Job, 
	results chan <- Result,
	wg *sync.WaitGroup,
	//control chan    ControlMsg,
){
	wg.Add(1)
	defer wg.Done()
	results <- Result{longCalculation(job),job}
}

// func fib(count int)int{
// 	if count <= 1 {
// 		return count
// 	}
// 	return fib(count-1)+fib(count-2)
// }


func main() {
	// rand.Seed(time.Now().UnixNano())
	jobs := makeJobs()
	results := make(chan Result, 100)
	var wg sync.WaitGroup
	m := make(map[Job] int)
	for idx,job := range jobs {
		fmt.Printf("  idx: %v runJob(job:%v,results,wv)\n",idx+1,job)
		m[Job(job)]=idx
		go runJob(job,results,&wg)
	}
	sum := 0
	rmsgMissCount := 0
	waitCount := 1
	waitTotal := 0
	// outerFor:
	// for len(m)!=0 {
	count := 100
	for count>0 {
		select{
		case rmsg := <- results:
			if waitCount>1{
				fmt.Println("    ...finally a subthread completed. main thread slept for:", waitTotal,"milliseconds")

			}
			rmsgMissCount = 0
			waitCount = 1
			waitTotal = 0
			_,ok:=m[rmsg.job]
			if ok{
				sum += rmsg.result
				count--
				fmt.Println("    thread remaining:", count)

				// delete(m,rmsg.job)
				// fmt.Println("    len(m):", len(m), "msg:",rmsg)
			}
		default:
			//rmsgMissPrev = rmsgMissCount
			rmsgMissCount += 1
			waitCount *= 2
			// if len(m)==0{
			// 	break outerFor
			// }
//			dur := time.Duration(fib(rmsgMissCount)) * time.Millisecond
			// dur := time.Duration(fib(rmsgMissCount+rmsgMissPrev+1)) * time.Millisecond
			dur := time.Duration((waitCount)) * time.Millisecond
			// fmt.Println("    len(m):",len(m),"sleep:", dur)
			time.Sleep(dur)
			waitTotal += waitCount
			// time.Sleep(time.Duration(rmsgMissCount) * time.Millisecond)

		}
	}
	wg.Wait()
	fmt.Println("sum:",sum)
}
